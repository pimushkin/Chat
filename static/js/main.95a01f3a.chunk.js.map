{"version":3,"sources":["Messages.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["Messages","_this","this","react_default","a","createElement","className","props","messages","map","message","index","Messages_RenderMessage","handleClick","Component","RenderMessage","_this$props$message","member","text","newMember","Fragment","style","backgroundColor","clientData","color","username","type","onClick","Input","state","e","setState","target","value","preventDefault","onSendMessage","_this2","onSubmit","onChange","placeholder","autofocus","randomText","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","drone","publish","room","window","Scaledrone","data","bind","assertThisInitialized","on","error","console","objectSpread","id","clientId","subscribe","push","log","textBot","Math","floor","random","length","toConsumableArray","splice","src_Messages","currentMember","src_Input","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAGMA,0LACK,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACXJ,KAAKK,MAAMC,SAASC,IAAI,SAACC,EAASC,GAAV,OAAoBR,EAAAC,EAAAC,cAACO,EAAD,CAAeF,QAASA,EAASC,MAAOA,EAAOE,YAAaZ,EAAKM,MAAMM,wBAJrGC,cAUjBC,mLACO,IAAAC,EAC2Bd,KAAKK,MAAMG,QAAtCO,EADAD,EACAC,OAAQC,EADRF,EACQE,KAAMC,EADdH,EACcG,UACfR,EAAQT,KAAKK,MAAMI,MACnBE,EAAcX,KAAKK,MAAMM,YAC/B,OACEV,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgB,SAAA,KACCH,GACDd,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,QACEC,UAAU,SACVe,MAAO,CAACC,gBAAiBL,EAAOM,WAAWC,SAE3CrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZW,EAAOM,WAAWE,UAErBtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQY,GACvBf,EAAAC,EAAAC,cAAA,UAAQqB,KAAK,SAASC,QAAS,kBAAMd,EAAYF,KAAjD,gDAIHQ,GACDhB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QACEC,UAAU,SACVe,MAAO,CAACC,gBAAiBH,EAAUI,WAAWC,SAEhDrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZa,EAAUI,WAAWE,UAExBtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQY,aAhCPJ,aAyCbd,IClBA4B,6MAhCbC,MAAQ,CACNX,KAAM,4EAGCY,GACP5B,KAAK6B,SAAS,CAACb,KAAMY,EAAEE,OAAOC,yCAGvBH,GACPA,EAAEI,iBACFhC,KAAK6B,SAAS,CAACb,KAAM,KACrBhB,KAAKK,MAAM4B,cAAcjC,KAAK2B,MAAMX,uCAG7B,IAAAkB,EAAAlC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAMgC,SAAU,SAAAP,GAAC,OAAIM,EAAKC,SAASP,KACjC3B,EAAAC,EAAAC,cAAA,SACEiC,SAAU,SAAAR,GAAC,OAAIM,EAAKE,SAASR,IAC7BG,MAAO/B,KAAK2B,MAAMX,KAClBQ,KAAK,OACLa,YAAY,4JACZC,UAAU,SAEZrC,EAAAC,EAAAC,cAAA,iFA1BUS,aCEd2B,EAAa,CAAC,qIAA6B,+HAA4B,qIAA6B,sIA2E3FC,cAhEb,SAAAA,IAAc,IAAAzC,EAAA,OAAA0C,OAAAC,EAAA,EAAAD,CAAAzC,KAAAwC,IACZzC,EAAA0C,OAAAE,EAAA,EAAAF,CAAAzC,KAAAyC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA7C,QATF2B,MAAQ,CACNrB,SAAU,GACVS,OAAQ,CACNQ,SAAU,SACVD,MAAO,YAIGvB,EAuDdkC,cAAgB,SAACzB,GACfT,EAAK+C,MAAMC,QAAQ,CACjBC,KAAM,kBACNxC,aAxDFT,EAAK+C,MAAQ,IAAIG,OAAOC,WAAW,mBAAoB,CACrDC,KAAMpD,EAAK4B,MAAMZ,SAEnBhB,EAAKY,YAAcZ,EAAKY,YAAYyC,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAA1C,KACnBA,EAAK+C,MAAMQ,GAAG,OAAQ,SAAAC,GACpB,GAAIA,EACF,OAAOC,QAAQD,MAAMA,GAEvB,IAAMxC,EAAM0B,OAAAgB,EAAA,EAAAhB,CAAA,GAAO1C,EAAK4B,MAAMZ,QAC9BA,EAAO2C,GAAK3D,EAAK+C,MAAMa,SACvB5D,EAAK8B,SAAS,CAACd,aAEJhB,EAAK+C,MAAMc,UAAU,mBAC7BN,GAAG,OAAQ,SAACH,EAAMpC,GACrB,IAAMT,EAAWP,EAAK4B,MAAMrB,SAQ5BA,EAASuD,KAAK,CAAC9C,SAAQC,KAAMmC,IAC7BK,QAAQM,IAAI/D,EAAK4B,MAAMoC,SACvBzD,EAASuD,KAAK,CAAC5C,UATG,CAChBI,WAAY,CACVC,MAAO,UACPC,SAAU,OAEZmC,GAAI,cAIoB1C,KAAMuB,EAAWyB,KAAKC,MAAMD,KAAKE,SAAW3B,EAAW4B,WACjFpE,EAAK8B,SAAS,CAACvB,eA3BLP,2EA8BFU,GACV+C,QAAQM,IAAIrD,GACX,IAAMH,EAAQmC,OAAA2B,EAAA,EAAA3B,CAAOzC,KAAK2B,MAAMrB,UAChCA,EAAS+D,OAAO5D,EAAO,GACvBT,KAAK6B,SAAS,CAACvB,8CAIhB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,iCAEFF,EAAAC,EAAAC,cAACmE,EAAD,CACEhE,SAAUN,KAAK2B,MAAMrB,SACrBiE,cAAevE,KAAK2B,MAAMZ,OAC1BJ,YAAaX,KAAKW,cAEpBV,EAAAC,EAAAC,cAACqE,EAAD,CACEvC,cAAejC,KAAKiC,wBA1DZrB,aCKE6D,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.95a01f3a.chunk.js","sourcesContent":["import {Component} from \"react\";\r\nimport React from \"react\";\r\n\r\nclass Messages extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"Messages-list\">\r\n        {this.props.messages.map((message, index) => <RenderMessage message={message} index={index} handleClick={this.props.handleClick} />)}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nclass RenderMessage extends Component {\r\n    render() {\r\n      const {member, text, newMember} = this.props.message;\r\n      const index = this.props.index;\r\n      const handleClick = this.props.handleClick;\r\n      return (\r\n        <>\r\n        {member && \r\n        <li>\r\n        <span\r\n          className=\"avatar\"\r\n          style={{backgroundColor: member.clientData.color}}\r\n        />\r\n          <div className=\"Message-content\">\r\n            <div className=\"username\">\r\n              {member.clientData.username}\r\n            </div>\r\n            <div className=\"text\">{text}</div>\r\n            <button type=\"button\" onClick={() => handleClick(index)}>Удалить</button>\r\n          </div>\r\n        </li>\r\n        }\r\n        {newMember &&\r\n        <li>\r\n          <span\r\n            className=\"avatar\"\r\n            style={{backgroundColor: newMember.clientData.color}}\r\n          />\r\n          <div className=\"Message-content\">\r\n            <div className=\"username\">\r\n              {newMember.clientData.username}\r\n            </div>\r\n            <div className=\"text\">{text}</div>\r\n          </div>\r\n        </li>\r\n        }\r\n      </>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Messages;\r\n","import {Component} from \"react\";\r\nimport React from \"react\";\r\n\r\nclass Input extends Component {\r\n  state = {\r\n    text: \"\"\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({text: e.target.value});\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    this.setState({text: \"\"});\r\n    this.props.onSendMessage(this.state.text);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Input\">\r\n        <form onSubmit={e => this.onSubmit(e)}>\r\n          <input\r\n            onChange={e => this.onChange(e)}\r\n            value={this.state.text}\r\n            type=\"text\"\r\n            placeholder=\"Введите сообщение и нажмите ENTER\"\r\n            autofocus=\"true\"\r\n          />\r\n          <button>Отправить</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Message from \"./Messages\";\r\nimport Input from \"./Input\";\r\n\r\nconst randomText = [\"красивый, воробей, летать\", \"оранжевый, ручка, видеть\", \"интересный, игрушка, роза\", \"единорог, алфавит, добрый\"];\r\n\r\nclass App extends Component {\r\n  state = {\r\n    messages: [],\r\n    member: {\r\n      username: \"Я\",\r\n      color: \"#aff8e1\",\r\n    }\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.drone = new window.Scaledrone(\"XG4srZveQyPHWebE\", {\r\n      data: this.state.member\r\n    });\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.drone.on('open', error => {\r\n      if (error) {\r\n        return console.error(error);\r\n      }\r\n      const member = {...this.state.member};\r\n      member.id = this.drone.clientId;\r\n      this.setState({member});\r\n    });\r\n    const room = this.drone.subscribe(\"observable-room\");\r\n    room.on('data', (data, member) => {\r\n      const messages = this.state.messages;\r\n      const newMember = {\r\n        clientData: {\r\n          color: \"#aff8e1\",\r\n          username: \"Bot\"\r\n        },\r\n        id: \"w0Ok7gP7i3\"\r\n      };\r\n      messages.push({member, text: data});\r\n      console.log(this.state.textBot);\r\n      messages.push({newMember, text: randomText[Math.floor(Math.random() * randomText.length)]});\r\n      this.setState({messages});\r\n    });\r\n  }\r\n  handleClick(index) {\r\n    console.log(index);\r\n     const messages = [...this.state.messages];\r\n     messages.splice(index, 1);\r\n     this.setState({messages});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <h1>Чат</h1>\r\n        </div>\r\n        <Message\r\n          messages={this.state.messages}\r\n          currentMember={this.state.member}\r\n          handleClick={this.handleClick}\r\n        />\r\n        <Input\r\n          onSendMessage={this.onSendMessage}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSendMessage = (message) => {\r\n    this.drone.publish({\r\n      room: \"observable-room\",\r\n      message\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}